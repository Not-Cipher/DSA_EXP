#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

// Insertion at the beginning
void insertAtBeginning(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    if (head == NULL) {
        newNode->next = newNode;
        head = newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        newNode->next = head;
        temp->next = newNode;
        head = newNode;
    }
}

// Insertion at the end
void insertAtEnd(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    if (head == NULL) {
        newNode->next = newNode;
        head = newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    }
}

// Deletion of a node
void deleteNode(int value) {
    if (head == NULL) {
        printf("List empty
");
        return;
    }
    struct Node *temp = head, *prev = NULL;

    // If head is to be deleted
    if (head->data == value) {
        if (head->next == head) {  // Only one node
            free(head);
            head = NULL;
        } else {
            // Find last node to update its next pointer
            while (temp->next != head) {
                temp = temp->next;
            }
            temp->next = head->next;
            struct Node* toDelete = head;
            head = head->next;
            free(toDelete);
        }
        printf("Deleted %d
", value);
        return;
    }

    // Deleting other than head
    temp = head;
    do {
        prev = temp;
        temp = temp->next;
        if (temp->data == value) {
            prev->next = temp->next;
            free(temp);
            printf("Deleted %d
", value);
            return;
        }
    } while (temp != head);

    printf("Element %d not found
", value);
}

// Traversal/display
void display() {
    if (head == NULL) {
        printf("List empty
");
        return;
    }
    struct Node* temp = head;
    printf("List elements: ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("
");
}

int main() {
    int choice, value;
    while(1) {
        printf("
1. Insert at beginning
2. Insert at end
3. Delete node
4. Display
5. Exit
Enter choice: ");
        scanf("%d", &choice);
        switch(choice) {
            case 1:
                printf("Enter value to insert at beginning: ");
                scanf("%d", &value);
                insertAtBeginning(value);
                break;
            case 2:
                printf("Enter value to insert at end: ");
                scanf("%d", &value);
                insertAtEnd(value);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                deleteNode(value);
                break;
            case 4:
                display();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice
");
        }
    }
    return 0;
}
